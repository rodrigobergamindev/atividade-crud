// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id      String      @id
  email   String   @unique
  name    String
  phoneNumber String 
  role    Role     @default(VISITANTE)
  birth   String  
  address UserAddress?
  prayer Prayer[]
  subscriptionEvent SubscriptionEvent[]
  plan Plan[]
  coordinationPG CoordinationPG?
  subscriptionPG SubscriptionPG?
  coordinationMinistry CoordinationMinistry[]
  subscriptionMinistry SubscriptionMinistry[]
  prayerComments PrayerComment[]
  church Church? @relation(fields: [churchName], references: [name], onDelete: Cascade, onUpdate: Cascade)
  churchName String?
  likes Like[]

  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt
  photoUrl String?

  password String
  contribuition Contribuition[]
}


model Contribuition {
  id      String      @id
  author User @relation(fields:[authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String
  createdAt DateTime @default(now())
  value String
  theme String
}


model SubscriptionMinistry {
  id      String      @id @default(uuid())
  status Status @default(PENDING)
  member User @relation(fields:[memberId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  memberId String
  ministry Ministry @relation(fields:[ministryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ministryId String
  createdAt DateTime @default(now())
 
}

model CoordinationMinistry {
  id      String      @id @default(uuid())
  coordinator User @relation(fields: [coordinatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coordinatorId String
  ministry Ministry @relation(fields: [ministryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ministryId String
  email String @unique
  phoneNumber String
  photoUrl String?


}


model Ministry {
    id      String      @id @default(uuid())
    name String @unique
    description String
    photoUrl String? 
    coordination CoordinationMinistry?
    subscriptionMinistry SubscriptionMinistry[]
  
}


model UserAddress {
    id   String    @id @default(uuid())
    place String 
    number String 
    complement String?
    zipCode String 
    district String
    city String
    country  String
    user User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId String
}

model ChurchAddress {
    id   String    @id @default(uuid())
    place String 
    number String 
    complement String? 
    zipCode String
    district String
    city String
    country  String
    church Church @relation(fields: [churchId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    churchId String
}

model Church {
    id      String      @id @default(uuid())
    name   String   @unique
    phoneNumber String
    email String
    type TypeChurch
    photo String?
    address ChurchAddress?
    members User[]
}

model Video {

    id      String      @id @default(uuid())
    title String
    date String
    url String
    photo String
}

model Cult {
  id      String      @id @default(uuid())
  title String
  date String
  photo String?
}

model Plan {
  id      String      @id @default(uuid())
  dates Int[]
  time String
  user User @relation(fields: [userId], references: [id])
  userId String

  @@unique([dates,time,userId])
}

model Prayer {
  id    String      @id @default(uuid())
  category PrayerCategory @relation(fields: [categoryTitle], references: [title], onDelete: Cascade, onUpdate: Cascade)
  categoryTitle String
  description String
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String
  likes Like[]
  comments PrayerComment[]
  photoUrl String?
  createdAt DateTime @default(now())

 
}

model Like {
  
 
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId String
  prayer Prayer @relation(fields: [prayerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  prayerId String
  createdAt DateTime @default(now())

  @@unique([authorId,prayerId])
}

model PrayerCategory {
    
    title String @unique @id
    prayer Prayer[]
}

model PrayerComment {
    id String      @id @default(uuid())
    message String
    prayer Prayer @relation(fields: [prayerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    prayerId String
    author User @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    authorId String
    createdAt DateTime @default(now())
    

    @@unique([prayerId, authorId])
}

model EventChurch {
  id      String      @id @default(uuid())
  title String
  date String
  start String
  end String
  subscription SubscriptionEvent[]
  photoUrl String?

  @@unique([date,start,end])
}


model SubscriptionEvent {
  id   String    @id @default(uuid())
  subscriber User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
  createdAt DateTime @default(now())
  event EventChurch @relation(fields: [eventId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  eventId String
}

model Devotional {
  id  String   @id @default(uuid())
  title String
  description String
  date String
  author String
  photoUrl String

  @@unique([title,author,date])
}

model CoordinationPG {
  id      String      @id @default(uuid())
  coordinator User @relation(fields: [coordinatorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  coordinatorId String
  pg PG @relation(fields: [pgId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pgId String
  email String @unique
  phoneNumber String
  photoUrl String?

   
}

model SubscriptionPG {
  id      String      @id @default(uuid())
  status Status @default(PENDING)
  member User @relation(fields:[memberId], references: [id])
  memberId String
  pg PG @relation(fields:[pgId], references: [id])
  pgId String
  createdAt DateTime @default(now())

}



model PG {
  id      String      @id @default(uuid())
  name String @unique
  description String
  reunionDate String
  time String
  photoUrl String
  coordination CoordinationPG?
  category PGCategoryTheme[]
  subscriptions SubscriptionPG[]
  reunions ReunionPG[]
}

model ReunionPG {
  id      String      @id @default(uuid())
  title String
  date String
  time String
  pg PG @relation(fields: [pgId], references: [id])
  pgId String
  material String?

  @@unique([date,time])
}


model PGCategoryTheme {
  
  category    PGCategory     @relation(fields: [categoryTitle], references: [title])
  categoryTitle     String
  pg   PG @relation(fields: [pgId], references: [id])
  pgId String 
  @@id([categoryTitle,pgId])
}

model PGCategory {
  title String  @id @unique
  categoryTheme PGCategoryTheme[]
}

enum Role {
  VISITANTE
  ADMIN
  MEMBRO
  PASTOR
  PRESBITERO
  DIACONO
  MISSIONARIO
  EVANGELISTA
}

enum TypeChurch {
  CONGREGACAO
  SEDE
  SUPERINTENDENCIA
}

enum Status {
  PENDING
  ACCEPTED
}